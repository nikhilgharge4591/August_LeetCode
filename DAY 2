Question 2:


Design a HashSet without using any built-in hash table libraries.

To be specific, your design should include these functions:

add(value): Insert a value into the HashSet. 
contains(value) : Return whether the value exists in the HashSet or not.
remove(value): Remove a value in the HashSet. If the value does not exist in the HashSet, do nothing.

class MyHashSet:

    def __init__(self):
        self.n_buckets = 1000
        self.buckets = [[] for i in range(self.n_buckets)]
        
    def hash(self, key):
        return key % self.n_buckets

    def add(self, key):
        key_hash = self.hash(key)
        if not self.contains(key):
            self.buckets[key_hash].append(key)

    def remove(self, key: int):        
        if self.contains(key):
            key_hash = self.hash(key)
            self.buckets[key_hash].remove(key)

    def contains(self, key):
        key_hash = self.hash(key)
        return key in self.buckets[key_hash]


# Your MyHashSet object will be instantiated and called as such:
obj = MyHashSet()
obj.add(10)
obj.remove(5)
param_3 = obj.contains(10)
